// <auto-generated />
using System;
using EFCore.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.Infrastructure.Migrations
{
  using Repository = Repository.Repository;
  [DbContext(typeof(Repository))]
    [Migration("20240922095301_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore.Domain.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LastName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EFCore.Domain.BookAuthorMap", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthorMap");
                });

            modelBuilder.Entity("EFCore.Domain.BookDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<int>("NumberofChapters")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("EFCore.Domain.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("580c4731-fb3c-4e4b-b7be-0bf6e7aa1f54"),
                            Author = "George Orwell",
                            Isbn = "978-0451524935",
                            Price = 9.99m,
                            PublisherId = 0,
                            Title = "1984"
                        },
                        new
                        {
                            Id = new Guid("45255998-fefd-4773-9e62-71879b59e34b"),
                            Author = "Aldous Huxley",
                            Isbn = "978-0060850524",
                            Price = 9.99m,
                            PublisherId = 0,
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = new Guid("5a7be3a0-1f35-4bb7-8438-8bdb9c461b3c"),
                            Author = "Ray Bradbury",
                            Isbn = "978-1451673319",
                            Price = 9.99m,
                            PublisherId = 0,
                            Title = "Fahrenheit 451"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31cc7641-142d-4896-bdb3-9dfdb3b1ea36"),
                            Name = "cat one"
                        },
                        new
                        {
                            Id = new Guid("537b8814-720c-4224-b70d-2d956f4f1573"),
                            Name = "cat two"
                        },
                        new
                        {
                            Id = new Guid("db2767ef-6639-4e3a-8c79-224a6ad07928"),
                            Name = "cat three"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Display")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("EFCore.Domain.PublisherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57cf0fe9-4d87-47ad-aec8-f5980ab93422"),
                            Location = "New York",
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = new Guid("2e31d2f3-d082-445b-8e75-aafcbdacfda2"),
                            Location = "London",
                            Name = "HarperCollins"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.BookAuthorMap", b =>
                {
                    b.HasOne("EFCore.Domain.AuthorEntity", "Author")
                        .WithMany("BookAuthorMaps")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.BookEntity", "Book")
                        .WithMany("BookAuthorMaps")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EFCore.Domain.BookDetailEntity", b =>
                {
                    b.HasOne("EFCore.Domain.BookEntity", "Book")
                        .WithOne("BookDetail")
                        .HasForeignKey("EFCore.Domain.BookDetailEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EFCore.Domain.BookEntity", b =>
                {
                    b.HasOne("EFCore.Domain.PublisherEntity", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EFCore.Domain.AuthorEntity", b =>
                {
                    b.Navigation("BookAuthorMaps");
                });

            modelBuilder.Entity("EFCore.Domain.BookEntity", b =>
                {
                    b.Navigation("BookAuthorMaps");

                    b.Navigation("BookDetail");
                });

            modelBuilder.Entity("EFCore.Domain.PublisherEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
