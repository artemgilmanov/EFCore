// <auto-generated />
using System;
using EFCore.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240915192302_FluentConfiguration")]
    partial class FluentConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_AuthorEntity", b =>
                {
                    b.Property<int>("Author_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Author_Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LastName")
                        .HasColumnType("int");

                    b.HasKey("Author_Id");

                    b.ToTable("Fluent_Authors");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookAuthorMap", b =>
                {
                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("Author_Id")
                        .HasColumnType("int");

                    b.HasKey("Book_Id", "Author_Id");

                    b.HasIndex("Author_Id");

                    b.ToTable("Fluent_BookAuthorMap");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookDetailEntity", b =>
                {
                    b.Property<int>("BookDetail_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookDetail_Id"));

                    b.Property<int>("Book_Id")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<int>("NumberofChapters")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookDetail_Id");

                    b.HasIndex("Book_Id")
                        .IsUnique();

                    b.ToTable("Fluent_BookDetails");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("Publisher_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Publisher_Id");

                    b.ToTable("Fluent_Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "George Orwell",
                            Isbn = "978-0451524935",
                            Price = 9.99m,
                            Publisher_Id = 1,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Aldous Huxley",
                            Isbn = "978-0060850524",
                            Price = 9.99m,
                            Publisher_Id = 2,
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Ray Bradbury",
                            Isbn = "978-1451673319",
                            Price = 9.99m,
                            Publisher_Id = 1,
                            Title = "Fahrenheit 451"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_PublisherEntity", b =>
                {
                    b.Property<int>("Publisher_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Publisher_Id"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Publisher_Id");

                    b.ToTable("Fluent_Publishers");

                    b.HasData(
                        new
                        {
                            Publisher_Id = 1,
                            Location = "New York",
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Publisher_Id = 2,
                            Location = "London",
                            Name = "HarperCollins"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_SubCategoryEntity", b =>
                {
                    b.Property<int>("SubCategory_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategory_Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubCategory_Id");

                    b.ToTable("Fluent_SubCategories");
                });

            modelBuilder.Entity("EFCore.Domain.Fluent_GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Display")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fluent_Genres");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookAuthorMap", b =>
                {
                    b.HasOne("EFCore.Domain.FluentEntities.Fluent_AuthorEntity", "Author")
                        .WithMany("BookAuthorMaps")
                        .HasForeignKey("Author_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.FluentEntities.Fluent_BookEntity", "Book")
                        .WithMany("BookAuthorMaps")
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookDetailEntity", b =>
                {
                    b.HasOne("EFCore.Domain.FluentEntities.Fluent_BookEntity", "Book")
                        .WithOne("BookDetail")
                        .HasForeignKey("EFCore.Domain.FluentEntities.Fluent_BookDetailEntity", "Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookEntity", b =>
                {
                    b.HasOne("EFCore.Domain.FluentEntities.Fluent_PublisherEntity", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Publisher_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_AuthorEntity", b =>
                {
                    b.Navigation("BookAuthorMaps");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_BookEntity", b =>
                {
                    b.Navigation("BookAuthorMaps");

                    b.Navigation("BookDetail");
                });

            modelBuilder.Entity("EFCore.Domain.FluentEntities.Fluent_PublisherEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
